{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getByRegion } from \"service/country-service\";\nexport const useGetByRegion = () => {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [countries, setCountries] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const onHandleSubmit = query => {\n    setSearchParams({\n      query: query\n    });\n    setQuery(searchParams.get(\"region\"));\n  };\n  useEffect(() => {\n    const region = searchParams.get(\"region\");\n    if (!region) return;\n    setIsLoading(true);\n    const getRegion = async () => {\n      try {\n        const data = await getByRegion(region);\n        setCountries(data);\n      } catch (error) {\n        console.error(error);\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getRegion();\n  }, [searchParams]);\n  return {\n    countries,\n    error,\n    isLoading,\n    onHandleSubmit\n  };\n};\n_s(useGetByRegion, \"5YoUP7wMpbNwaSVwSn4MLOZUayM=\", false, function () {\n  return [useSearchParams];\n});","map":{"version":3,"names":["useEffect","useState","useSearchParams","getByRegion","useGetByRegion","query","setQuery","countries","setCountries","error","setError","isLoading","setIsLoading","searchParams","setSearchParams","onHandleSubmit","get","region","getRegion","data","console","message"],"sources":["/Users/denis/Documents/github/goit/React/reactPractice/src/hooks/useGetByRegion.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\n\nimport { getByRegion } from \"service/country-service\";\n\nexport const useGetByRegion = () => {\n  const [query, setQuery] = useState(\"\");\n  const [countries, setCountries] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const onHandleSubmit = (query) => {\n    setSearchParams({ query: query });\n    setQuery(searchParams.get(\"region\"));\n  };\n\n  useEffect(() => {\n    const region = searchParams.get(\"region\");\n    if (!region) return;\n    setIsLoading(true);\n    const getRegion = async () => {\n      try {\n        const data = await getByRegion(region);\n        setCountries(data);\n      } catch (error) {\n        console.error(error);\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getRegion();\n  }, [searchParams]);\n\n  return {\n    countries,\n    error,\n    isLoading,\n    onHandleSubmit,\n  };\n};\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,eAAe,QAAQ,kBAAkB;AAElD,SAASC,WAAW,QAAQ,yBAAyB;AAErD,OAAO,MAAMC,cAAc,GAAG,MAAM;EAAA;EAClC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGZ,eAAe,EAAE;EAEzD,MAAMa,cAAc,GAAIV,KAAK,IAAK;IAChCS,eAAe,CAAC;MAAET,KAAK,EAAEA;IAAM,CAAC,CAAC;IACjCC,QAAQ,CAACO,YAAY,CAACG,GAAG,CAAC,QAAQ,CAAC,CAAC;EACtC,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACd,MAAMiB,MAAM,GAAGJ,YAAY,CAACG,GAAG,CAAC,QAAQ,CAAC;IACzC,IAAI,CAACC,MAAM,EAAE;IACbL,YAAY,CAAC,IAAI,CAAC;IAClB,MAAMM,SAAS,GAAG,YAAY;MAC5B,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMhB,WAAW,CAACc,MAAM,CAAC;QACtCT,YAAY,CAACW,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdW,OAAO,CAACX,KAAK,CAACA,KAAK,CAAC;QACpBC,QAAQ,CAACD,KAAK,CAACY,OAAO,CAAC;MACzB,CAAC,SAAS;QACRT,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IACDM,SAAS,EAAE;EACb,CAAC,EAAE,CAACL,YAAY,CAAC,CAAC;EAElB,OAAO;IACLN,SAAS;IACTE,KAAK;IACLE,SAAS;IACTI;EACF,CAAC;AACH,CAAC;AAAC,GApCWX,cAAc;EAAA,QAKeF,eAAe;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}